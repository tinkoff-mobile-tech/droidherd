droidherd {
  # name of a namespace where you want to run emulators.
  namespace = "droidherd-service"
  namespace= ${?NAMESPACE}

  # host of droidherd - used to send request from emulator to post startup metric
  # (require such logic in emulator startup script)
  droidherdHost = "localhost:8080"
  droidherdHost = ${?DROIDHERD_HOST}

  # max time that session could exist
  sessionValidationExpiredAfterSeconds = 10800

  # max time that session could exist without a ping
  lastSeenMaxDeltaSeconds = 600

  # period of session invalidation
  invalidateSessionsPeriodSeconds = 60

  # k8s operator period to trigger full refresh of CRDs from cluster
  operatorResyncPeriodMinutes = 5

  # timeout for list resource requests
  listResourcesTimeoutSeconds = 11

  # id of the client with superuser rights
  superuser = "superuser"
  superuser = ${?AUTH_SUPERUSER}

  # paths to yaml templates for crd, pod and service
  # if starts with 'classpath:' - search resource there. Otherwise looking for regular file.
  crdTemplatePath = "classpath:/operator/crd-template.yml"
  podTemplatePath = "classpath:/operator/pod-template.yml"
  serviceTemplatePath = "classpath:/operator/service-template.yml"

  # emulator alias with associated docker image
  allowedImages {
    android-26 = "ealen/echo-server"
    android-28 = "ealen/echo-server"
    android-29 = "ealen/echo-server"
    android-30 = "ealen/echo-server"
  }

  # operator default requeue timeout
  requeueAfterDefaultSeconds = 15
  # operator timeout in case of pending emulators
  requeueAfterPendingSeconds = 10
  # operator timeout after emulator creation
  requeueAfterCreationSeconds = 30

  # Applies CRD DroidherdSession at startup if true (require admin access to cluster, no recommends for PROD usage)
  applyCrdAtStartup = true
  # Perform dry request to create DroidherdSession CRD during service initialization. If failed - service not started.
  dryRun = true
}

quota {
    # quota for any client
    defaultQuota = 10
    # file which contains configured quota per specified client
    quotaConfigPath = "/config/client-quotas.conf"
    # if false - service failed to start if file does not exist
    allowMissingConfig = true
    # timeout between refresh quotas config
    refreshPeriodMinutes = 5
}
