name: Release Droidherd

#on:
#  push:
#    branches: [ "main", "build-docker" ]

on:
  release:
    types: [created, workflow_dispatch]

env:
  MVN_LOGIN: ${{ secrets.NEXUS_LOGIN }}
  MVN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
  DOCKER_REPOSITORY: ${{secrets.DOCKER_REPOSITORY}}

jobs:
  publish-api-to-maven-repo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check repository and tag
        run: .github/scripts/release-env-check.sh

      - name: Set build version
        run: |
          echo "BUILD_VERSION=$(echo $GITHUB_REF_NAME | grep -Eo '[0-9]\.[0-9]+\.[0-9]+')" >> $GITHUB_ENV

      - name: Show and check version
        run: |
          echo "Evaluated version: [$BUILD_VERSION]"
          if [[ -z "$BUILD_VERSION" ]]; then exit 1; fi

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build
        run: ./gradlew assemble test

      - name: Generate sign key for publishing
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
          SIGN_OSSRH_GRADLE_PROPERTIES: ${{ secrets.SIGN_OSSRH_GRADLE_PROPERTIES }}
        run: |
          echo "$GPG_KEY" | base64 --decode > /tmp/secring.gpg
          mkdir -p ~/.gradle
          echo -en "$SIGN_OSSRH_GRADLE_PROPERTIES" > ~/.gradle/gradle.properties

      - name: Execute Gradle publish
        uses: gradle/gradle-build-action@v2
        with:
          arguments: :api:publish -Psigning.secretKeyRingFile=/tmp/secring.gpg
        env:
          MVN_RELEASE_REPOSITORY: https://oss.sonatype.org/service/local/staging/deploy/maven2/

      - name: Execute Gradle nexus staging release
        uses: gradle/gradle-build-action@v2
        with:
          arguments: closeAndReleaseRepository
        env:
          MVN_RELEASE_REPOSITORY: https://oss.sonatype.org/service/local/

      - name: Docker build and push
        run: |
          echo '${{ secrets.DOCKER_REPOSITORY_PASSWORD }}' | docker login -u $DOCKER_REPOSITORY --password-stdin
          docker build ./app --file ./app/OssDockerfile --tag $DOCKER_REPOSITORY/droidherd:${BUILD_VERSION}
          docker tag $DOCKER_REPOSITORY/droidherd:${BUILD_VERSION} $DOCKER_REPOSITORY/droidherd:latest
          echo "Update latest tag $DOCKER_REPOSITORY/droidherd"  
          docker push $DOCKER_REPOSITORY/droidherd:latest
